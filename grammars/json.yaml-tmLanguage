name: JSON
scopeName: source.json
fileTypes:
  - '.json'
patterns:
  - include: '#main'

repository:
  main:
    patterns:
      - include: '#object'
      - include: '#key'
      - include: '#array'
      - include: '#string'
      - include: '#number'
      - include: '#boolean'
      - include: '#null'
      - include: '#delimiters'
      - include: '#invalid'

  # Objects
  object:
    name: meta.block.object.json
    begin: '{'
    end: '}'
    beginCaptures:
      '0': { name: punctuation.definition.block.object.begin.json }
    endCaptures:
      '0': { name: punctuation.definition.block.object.end.json }
    patterns:
      - include: '#main'

  # Array
  array:
    name: meta.block.array.json
    begin: '\['
    end: '\]'
    beginCaptures:
      '0': { name: punctuation.definition.block.array.begin.json }
    endCaptures:
      '0': { name: punctuation.definition.block.array.end.json }
    patterns:
      - include: '#main'

  # Escape sequences
  escapes:
    patterns:
      - name: constant.character.escape.json
        match: '(\\)["\\/bfnrt]'
        captures:
          '1': { name: punctuation.definition.escape.backslash.json }
      - name: constant.character.escape.unicode.json
        match: '(\\)u[0-9A-Fa-f]{4}'
        captures:
          '1': { name: punctuation.definition.escape.backslash.json }
      - name: invalid.illegal.unrecognised-escape.json
        match: '\\.'

  # Key:value pairs
  key:
    name: entity.name.tag.key.json
    match: '(")((?:[^\\"]|\\.)*+)(")\s*(?=:)'
    captures:
      '1': { name: punctuation.definition.key.start.json }
      '2': { patterns: [ include: '#escapes' ] }
      '3': { name: punctuation.definition.key.end.json }

  # String
  string:
    name: string.quoted.double.json
    match: '(")((?:[^\\"]|\\.)*+)(")\s*(?!:)'
    captures:
      '1': { name: punctuation.definition.string.begin.json }
      '2': { patterns: [ include: '#escapes' ] }
      '3': { name: punctuation.definition.string.end.json }

  # Numbers
  number:
    patterns:
      - name: invalid.illegal.leading-zero.json
        match: '-?0\d+(?:\.\d+)?(?:[eE][-+]?[0-9]+)?'
      - name: constant.numeric.json
        match: '-?\d+(?:\.\d+)?(?:[eE][-+]?[0-9]+)?'

  # Boolean
  boolean:
    name: constant.language.boolean.$1.json
    match: '(?<=^|[,:\s\[])(true|false)(?=$|[,\s\]])'

  # Null
  null:
    name: constant.language.null.json
    match: '(?<=^|[,:\s\[])null(?=$|[,\s\]])'

  # Delimiter
  delimiters:
    patterns:
      - name: punctuation.separator.key-value.colon.json
        match: ':'
      - name: punctuation.separator.comma.json
        match: ','

  # Other/invalid
  invalid:
    name: 'invalid.illegal.unexpected-character.json'
    match: '\S[^}\]]*'
